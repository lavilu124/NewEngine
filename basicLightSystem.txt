#include <SFML/Graphics.hpp>

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Simple 2D Light System");

    // Create a render texture for the light
    sf::RenderTexture lightTexture;
    lightTexture.create(800, 600);

    // Create a radial gradient for the light
    sf::CircleShape light(200);
    light.setPointCount(100);
    light.setOrigin(200, 200);

    // Create a gradient texture for the light
    sf::Texture gradientTexture;
    sf::Image gradientImage;
    gradientImage.create(400, 400);

    //asigan alphas depending on distance from light soruce
    for (unsigned y = 0; y < 400; ++y) {
        for (unsigned x = 0; x < 400; ++x) {
            float distance = std::sqrt((x - 200) * (x - 200) + (y - 200) * (y - 200));
            float intensity = std::max(0.f, 1.f - distance / 200.f);
            sf::Uint8 alpha = static_cast<sf::Uint8>(255 * intensity);
            gradientImage.setPixel(x, y, sf::Color(255, 255, 255, alpha));
        }
    }

    gradientTexture.loadFromImage(gradientImage);
    light.setTexture(&gradientTexture);


    sf::RectangleShape cube(sf::Vector2f(100, 100));
    cube.setPosition(350, 250);
    cube.setFillColor(sf::Color::Blue);


    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }


        lightTexture.clear(sf::Color(20, 20, 20, 150));  // Dark background

        
        sf::Vector2i mousePosition = sf::Mouse::getPosition(window);
        light.setPosition(static_cast<float>(mousePosition.x), static_cast<float>(mousePosition.y));

        
        lightTexture.draw(light, sf::BlendAdd);

        
        lightTexture.display();

        
        window.clear();

        //grey background
        sf::RectangleShape background(sf::Vector2f(800, 600));
        background.setFillColor(sf::Color(50, 50, 50));
        window.draw(background);

        
        window.draw(cube);

        // Draw the light texture on top
        sf::Sprite lightSprite(lightTexture.getTexture());
        window.draw(lightSprite, sf::BlendMultiply);


        window.display();
    }

    return 0;
}